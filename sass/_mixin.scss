/*============================================================================
 extend setting
============================================================================*/

%clearfix{
	zoom:1;
	&:after{
		display: block;
		content: "";
		clear: both;
	}
}

%ellipsis{
	overflow: hidden;
	white-space: nowrap;
	text-overflow: ellipsis;
	-ms-text-overflow: ellipsis;
}

%hidetext{
	overflow: hidden;
	text-indent: 100%;
    white-space: nowrap;
}


/*============================================================================
 mixin setting
============================================================================*/

// 	MEDIA QUERY MANAGER
//---------------------------------------------------
/*
0 - 600px:      Phone
600 - 900px:    Tablet portrait
900 - 1200px:   Tablet landscape
[1200 - 1800] is where our normal styles apply
1800px + :      Big desktop

$breakpoint arguement choices:
- phone
- tab-port
- tab-land
- big-desktop

ORDER: Base + typography > general layout + grid > page layout > components

1em = 16px

@include respond(tab-port) {
    width: 100%;
    text-align: center;
}

*/

@mixin respond($breakpoint) {
    /*　画面サイズが600pxまではここを読み込む　*/
    @if $breakpoint == phone {
        @media only screen and (max-width: 37.5em) { @content };    //600px
    }
    /*　画面サイズが900pxまではここを読み込む　*/
    @if $breakpoint == tab-port {
        @media only screen and (max-width: 56.25em) { @content };     //900px
    }
    /*　画面サイズが1200pxまではここを読み込む　*/
    @if $breakpoint == tab-land {
        @media only screen and (max-width: 75em) { @content };    //1200px
    }

    /*　画面サイズが1201-1800は通常のcssの値を参照する　*/

    /*　画面サイズが1800pxからはここを読み込む　*/
    @if $breakpoint == big-desktop {
        @media only screen and (min-width: 112.5em) { @content };    //1800
    }
}

// 	compass mixin simplify
//---------------------------------------------------

@mixin radius($size) {
	@include border-radius($size + px);
}

@mixin box($type: border-box) {
	@include box-sizing(#{$type});
}



// 	general
//---------------------------------------------------

@mixin fz($size: 14) {
	font-size: $size + px;
	font-size: ($size / 10)  + rem;
}

@mixin middleline($height, $ie: 0){
	height: $height + px;
	line-height: $height + px;
	&:not(:target){
		line-height: $height + $ie + px + \9;
	}
	:root & {
		line-height: $height + $ie + px + \9;
	}
}

@mixin linkColor($color) {
     color: $color;

     &:hover, &:active, &:focus {
         color: lighten($color, 20%);
     }
}
@mixin opacity($opacity) {
     opacity: $opacity;
     $opacityIE: $opacity * 100;
     filter: alpha(opacity=$opacityIE);
}
//	figure
//---------------------------------------------------

@mixin circle($size:100px){
	width: $size + px;
	height: $size + px;
	@include border-radius(100%);
}

@mixin rounded($height, $display: inline-block){
	$space: round($height / 2) + px;
	display: $display;
	padding: 0 $space;
	@include radius($height);
	@include middleline($height);
}

@mixin arrow($direction: right, $size: 10, $color: $black){
	$set: left;

	@if $direction == left{
		$set: right;
	}@elseif $direction == top{
		$set: bottom;
	}@elseif $direction == bottom{
		$set: top;
	}@else{
		$set: left;
	}
	$size: round($size / 2);

	width: 0;
	height: 0;
	border: $size + px solid transparent;
	border-#{$set}-color: $color;
}

@mixin arrowlink($top, $size: 10, $color: $black){
	position: relative;
	padding-left: 10px;
	&:before{
		display: block;
		content: "";
		position: absolute;
		top: $top + px;
		left: 1px;
		@include arrow(right, $size, $color);
	}
}



//	css sprite
//---------------------------------------------------

@mixin sprite_image($src, $display: block){
	@if $display == inline-block {
		@include inline-block;
	}@else{
		display: $display;
	}
	background-image: url($src);
	background-repeat: no-repeat;
}

@mixin sprite_position($pos_x, $pos_y, $i, $line: x){
	$x: $pos_x;
	$y: $pos_y;

	@if $line == x {
		$x: $pos_x * $i + px;
		$y: $pos_y + px;
	}@elseif $line == y {
		$x: $pos_x + px;
		$y: $pos_y * $i + px;
	}
	background-position: $x $y;
}

@mixin sprite($src, $pos_x, $pos_y, $i, $display: block, $line: x){
	@include sprite_image($src, $display);
	@include sprite_position($pos_x, $pos_y, $i, $line);
}

@mixin clearfix {
    &::after {
        content: "";
        display: table;
        clear: both;
    }
}

@mixin absCenter {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
}

@mixin absPosition ($top: auto, $right: auto, $bottom: auto, $left: auto) {
     position: absolute;
     top: $top;
     right: $right;
     bottom: $bottom;
     left: $left;
}

/*
retina display
.logo {
     @include imgRetina(logo, png, 100px, 40px);
}
*/
@mixin imgRetina($image, $extension, $width, $height) {
     background: url($image + '.' + $extension) no-repeat;
     width: $width;
     height: $height;

     @media (min--moz-device-pixel-ratio: 1.3),
           (-o-min-device-pixel-ratio: 2.6/2),
           (-webkit-min-device-pixel-ratio: 1.3),
           (min-device-pixel-ratio: 1.3),
           (min-resolution: 1.3dppx) {
                background-image: url($image + '-2x' + '.' + $extension) no-repeat;
                background-size: $width $height;
     }
}
